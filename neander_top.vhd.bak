library ieee;
use ieee.std_logic_1164.all;

entity  neander_top is
   port (mclk: in std_logic;
	      sw: in std_logic_vector (3 downto 0);
			btn:  in std_logic;
			a_to_g_0: out std_logic_vector (6 downto 0);
			a_to_g_1: out std_logic_vector  (6 downto 0);
			a_to_g_2: out std_logic_vector  (6 downto 0);
			a_to_g_3: out std_logic_vector  (6 downto 0));
end neander_top;

architecture structural of neander_top is
component clkdiv is
	port (
	clk: in std_logic ;
	clr: in std_logic ;
	clk25: out std_logic;
	clk190: out std_logic ;
	clk3: out std_logic ); 
end component;

component hex7seg is
	port (
	x :   in std_logic_vector (3 downto 0);
	a_to_g: out	std_logic_vector (6 downto 0) 
	);
end component;

component clock_pulse is
	port (
	inp: in std_logic ;
	cclk: in std_logic ;
	clr: in std_logic ;
	outp: out std_logic 
	);
end component;

component neander_rom is
	port (
	addr: in std_logic_vector (3 downto 0);
	M: out std_logic_vector (7 downto 0)
	);
end component;

component reg is
	generic (N: integer := 4);
	port (
	load : in std_logic ;
	clk:  in std_logic ;
	clr: in std_logic ;
	d: in std_logic_vector (N-1 downto 0);
	q: out std_logic_vector (N-1 downto 0)
);
end component;




signal filtered_pulse: std_logic;
signal sclk_190kHz: std_logic;
signal mem_d3_d0: std_logic_vector(3 downto 0);
signal mem_d7_d4: std_logic_vector (7 downto 4);
signal rem_output: std_logic_vector (3 downto 0);
signal mem_output: std_logic_vector (7 downto 0);

begin
CD:  clkdiv port map (
	clk => mclk, 
	clr  => '0', 
	 -- clk25: não esta ligado
	  clk190  => sclk_190kHz
 ---	clk3 => sclk3 
	); 				

CP:  clock_pulse  port map ( 
	       inp => btn,
	       cclk => sclk_190kHz,
	       clr => '0',
	       outp => filtered_pulse
     );
D0H7S: hex7seg port map (
	x  => mem_d3_d0,
	a_to_g => a_to_g_0
    );
D1H7S: hex7seg port map (
   x => mem_d7_d4,
	a_to_g => a_to_g_1
   );
	
MEM: neander_rom port map ( 
	addr => rem_output, 
	M => mem_output
  );
REG_REM: reg port map   (
	load => '1',
	clk => filtered_pulse,
	clr => '0',
	d => sw,
	q => rem_output
);	

mem_d3_d0 <= mem_output (3) & 	mem_output(2) & mem_output(1) & mem_output(0);
mem_d7_d4 <= mem_output (7) & 	mem_output(6) & mem_output(5) & mem_output(4);

a_to_g_2 <= "1111111"; -- apagar displays não usados.
a_to_g_3 <= "1111111"; -- apagar displays não usados.

	 
end ;
